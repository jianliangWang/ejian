package ${package.ServiceImpl};

import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import ${package.Entity}.${entity};
import ${package.Mapper}.${table.mapperName};
#if(${table.serviceInterface})
import ${package.Service}.${table.serviceName};
#end
import ${superServiceImplClassPackage};
import org.springframework.stereotype.Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * <p>
 * $!{table.comment} 业务实现类
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Service
#if(${kotlin})
open class ${table.serviceImplName} : ${superServiceImplClass}<${table.mapperName}, ${entity}>()#if(${table.serviceInterface}), ${table.serviceName}#end {

}
#else
public class ${table.serviceImplName} extends ${superServiceImplClass}<${table.mapperName}, ${entity}>#if(${table.serviceInterface}) implements ${table.serviceName}#end {

    private final ${table.mapperName} ${table.entityPath}Mapper;

    public ${table.serviceImplName}(${table.mapperName} ${table.entityPath}Mapper) {
        this.${table.entityPath}Mapper = ${table.entityPath}Mapper;
    }

    @Override
    public IPage<${table.entityName}> list(Page<${table.entityName}> page, ${table.entityName} ${table.entityPath}){
        return ${table.entityPath}Mapper.selectPage(page, createQueryWrapper(${table.entityPath}));
    }

    @Override
    public int add(${table.entityName} ${table.entityPath}){
        return ${table.entityPath}Mapper.insert(${table.entityPath});
    }

    @Override
    public int update(${table.entityName} ${table.entityPath}){
        return ${table.entityPath}Mapper.updateById(${table.entityPath});
    }

    @Override
    public ${table.entityName} getById(Integer id){
        return ${table.entityPath}Mapper.selectById(id);
    }

    @Override
    public int delete(Integer id){
        return ${table.entityPath}Mapper.deleteById(id);
    }

    private LambdaQueryWrapper<${table.entityName}> createQueryWrapper(${table.entityName} ${table.entityPath}){
        return new LambdaQueryWrapper<${entity}>()
        #foreach($field in ${table.fields})
            #if($field.propertyType.equals("String"))
                    .eq(${table.entityName}::get${field.capitalName}, ${table.entityPath}.get${field.capitalName}())
            #end
        #end
                .orderByDesc(${table.entityName}::getId);
        }
}
#end
